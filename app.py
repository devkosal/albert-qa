
        #################################################
        ### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
        #################################################
        # file to edit: dev_nb/TextbookQA_App.ipynb

import os

import numpy as np
import torch
import torch.nn.functional as F
from transformers import AutoTokenizer, PretrainedConfig
import sqlite3, os, pandas as pd
from scipy import stats
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity, pairwise_distances
from scipy.sparse import save_npz, load_npz
import pickle
from pathlib import Path
from src import AlbertForQuestionAnsweringMTL, Config
from src.utils_app import get_pred, get_contexts, get_scores
import requests
import pandas as pd

config = Config(
    model = "albert-base-v2",
    weights = "models/2.0/base",
    pad_idx = 0,
    example = "intro_to_nutrition",
    book_name = "Intro to Nutrition",
    book_link = "https://drive.google.com/file/d/1hOf6wPNjeUvWflVIRwjbB7h-qMTMMp-G/view",
    sections_file_type = "csv" # can be either db or csv
)

tok = AutoTokenizer.from_pretrained(config.model)
model = AlbertForQuestionAnsweringMTL.from_pretrained(config.weights) # ensure pytroch_model.bin and config files are saved in directory

if config.sections_file_type == "db":
    # connecting to the DB
    con = sqlite3.connect(f'examples/{config.example}/sections.{config.sections_file_type}')
    data = con.cursor()
elif config.sections_file_type == "csv":
    data = pd.read_csv(f'examples/{config.example}/sections.{config.sections_file_type}')

# loading files
X = load_npz(f"examples/{config.example}/tfidf-vectors.npz")
vectorizer = pickle.load(open(f"examples/{config.example}/vectorizer.pkl","rb"))

import panel as pn
css = """ """ # use for custom css
pn.extension(raw_css=[css])

# creating the text input widget
question = pn.widgets.TextInput(placeholder="input a health science related query here")

question

# creating the markdown text pane where generated text will go
answer = pn.pane.Markdown("")
section = pn.pane.Markdown("",width=600,background="yellow")
section_spacer = pn.pane.Markdown("**Most Relevant Section:**")

# create the button widget
button = pn.widgets.Button(name="Submit",button_type="warning")

# writing the call back function when the generate_button is clicked
def click_cb(event):
    button.name, button.button_type = "Finding Answer...", "success" # change button to represent processing
    scores = get_scores(question.value, vectorizer, X)
    contexts = get_contexts(scores, data)
    pred, best_section = get_pred(contexts, question.value, model, tok, config.pad_idx)
    section.object = best_section
    answer.object = pred
    button.name, button.button_type = "Submit", "warning" # change button back

# linking the on_click acton with the click_cb function
button.on_click(click_cb)

# compiling our app with the objects we have created thus far
app = pn.Column(pn.Column(question,button,answer,section_spacer,section))

# Building the final app with a title, description, images etc.
title_style = {"font-family":"impact"}
style = {"font-family":""}
title = pn.pane.Markdown("# **askAi**",style=title_style)
desc = pn.pane.Markdown(f"Welcome to **TextBookQA**, a question answering demo for extracting answers from \
textbooks. This demo is based on the textbook, [*{config.book_name}*]({config.book_link}) \
(source: openbooks). Input a respective question and receive the answer and the relevant section.",style=style)
img1 = pn.pane.PNG(f"examples/{config.example}/cover.png",height=300,align="center")
footer = pn.pane.HTML("""<a href="https://github.com/devkosal/albert-qa">Github""", align="center")
# Panel spacer object to center our title
h_spacer = pn.layout.HSpacer()
final_app = pn.Row(h_spacer, pn.Column( pn.Row(h_spacer,title,h_spacer) , desc, img1 ,app, footer), h_spacer)

# this command is needed in order to serve this app in production mode. (make sure to uncomment ofcourse)
final_app.servable()